#
# SPDX-License-Identifier: GPL-2.0-only
#
# Copyright (C) 2015-2020 Micron Technology, Inc.  All rights reserved.
#

#----------------------------------------------------------------
# Syntax Conventions:
#
#  Cmake keywords and vars    : uppercase
#  MSE global vars            : uppercase
#  Local vars                 : lowercase
#  Function parameter FOO     : param_FOO
#----------------------------------------------------------------


INCLUDE(CMakeParseArguments)

FUNCTION(MY_JOIN output sep)
    SET(result "")
    SET(esep "") # effective sep is empty at the beginning
    FOREACH(arg ${ARGN})
        SET(result "${result}${esep}${arg}")
        SET(esep "${sep}")
    ENDFOREACH()
    SET(${output} "${result}" PARENT_SCOPE)
ENDFUNCTION()

#
# Functions that add text to the beginning of each element of a list
#
# The action of each of these is given in terms of their operation on
# the variable foo defined as:
#
#     SET( foo /tmp/cat /tmp/dog )
#

#
# MY_ADD_PREFIX(output " -I" ${foo})  ==>  ${output}=="-I/tmp/cat; -I/tmp/dog"
#
FUNCTION(MY_ADD_PREFIX output_var text)
    SET(result "")
    FOREACH(arg ${ARGN})
        LIST(APPEND result "${text}${arg}")
    ENDFOREACH()
    SET(${output_var} "${result}" PARENT_SCOPE)
ENDFUNCTION()

#
# MY_PREPEND_OVER(output " -I" ${foo})  ==>  ${output}=="-I/tmp/cat -I/tmp/dog"
#
FUNCTION(MY_PREPEND_OVER output pfx)
    SET(result "")
    FOREACH(arg ${ARGN})
        SET(result "${result}${pfx}${arg}")
    ENDFOREACH()
    SET(${output} "${result}" PARENT_SCOPE)
ENDFUNCTION()


FUNCTION(MY_ADD_SUFFIX output_var text)
    SET(result "")
    FOREACH(arg ${ARGN})
        LIST(APPEND result "${arg}${text}")
    ENDFOREACH()
    SET(${output_var} "${result}" PARENT_SCOPE)
ENDFUNCTION()


FUNCTION(MY_EXECUTE_OR_DIE)
    EXECUTE_PROCESS(
        COMMAND ${ARGN}
        ERROR_VARIABLE  cmd_stderr
        RESULT_VARIABLE cmd_status)
    IF(NOT("${cmd_status}" STREQUAL "0"))
        MY_JOIN(cmd " " ${ARGN})
        MESSAGE(FATAL_ERROR
            "Error executing command\n"
            "Command: ${cmd}\n"
            "Exit Status: ${cmd_status}\n"
            "Stderr: ${cmd_stderr}\n")
    ENDIF()
ENDFUNCTION()



#----------------------------------------------------------------
# Use mpool_copy_files to copy a set of files from the current src
# dir to the corresponding build output dir:
#
#   mpool_copy_files(foobar
#    ${CMAKE_CURRENT_BINARY_DIR}
#     readme *.txt *.json *.sh doc/*.txt)
#----------------------------------------------------------------

MACRO(mpool_copy_files target_name dst_dir)
  ADD_CUSTOM_TARGET(${target_name} ALL)
  FOREACH(PATTERN ${ARGN})
    FILE(GLOB COPY_FILES
      RELATIVE ${CMAKE_CURRENT_SOURCE_DIR}
      ${PATTERN})
    FOREACH(filename ${COPY_FILES})
      SET(SRC "${CMAKE_CURRENT_SOURCE_DIR}/${filename}")
      SET(DST "${dst_dir}/${filename}")
      ADD_CUSTOM_COMMAND(
        TARGET ${target_name}
        COMMAND ${CMAKE_COMMAND} -E copy_if_different ${SRC} ${DST})
    ENDFOREACH()
  ENDFOREACH()
ENDMACRO()


#----------------------------------------------------------------
#
# MPOOL_OBJECT_FILES : Function to build a collection of object files
#
#----------------------------------------------------------------
FUNCTION(MPOOL_OBJECT_FILES)

    SET(one_value_opts
        NAME            # (required) name for collection of object files
        )

    SET(multi_value_opts
        SRCS            # (required) list of source files
        DEPS            # CMake targets that must be built first
        CFLAGS          # Additional CFLAGS
        INCLUDES        # Directories to search for #include
        )

    CMAKE_PARSE_ARGUMENTS(
        param
        "" "${one_value_opts}" "${multi_value_opts}"
        ${ARGN})

    IF("${param_NAME}" STREQUAL "")
        MESSAGE(FATAL_ERROR "MPOOL_OBJECT_FILES: Must set NAME")
    ENDIF()

    IF("${param_SRCS}" STREQUAL "")
        MESSAGE(FATAL_ERROR "MPOOL_OBJECT_FILES: Must set SRCS")
    ENDIF()

    IF(NOT "${param_UNPARSED_ARGUMENTS}" STREQUAL "")
        MESSAGE(
            FATAL_ERROR
            "MPOOL_OBJECT_FILES: Unknown args: ${param_UNPARSED_ARGUMENTS}")
    ENDIF()

    ADD_LIBRARY(${param_NAME} OBJECT ${param_SRCS})
    TARGET_INCLUDE_DIRECTORIES(${param_NAME} PRIVATE ${param_INCLUDES})
    TARGET_COMPILE_OPTIONS(${param_NAME} PRIVATE ${param_CFLAGS})
    IF(NOT "${param_DEPS}" STREQUAL "")
        ADD_DEPENDENCIES(${param_NAME} ${param_DEPS})
    ENDIF()

ENDFUNCTION()


#----------------------------------------------------------------
#
#  Definitions for compiling kernel modules
#
#----------------------------------------------------------------

FILE(MAKE_DIRECTORY ${PROJECT_BINARY_DIR}/kernel/mpool)

# set KDIR = absolute path to kernel directory
GET_FILENAME_COMPONENT(KDIR ${MPOOL_KERNEL_DIR} ABSOLUTE)

# Create symlinks to files in KDIR
MY_EXECUTE_OR_DIE(
    find ${KDIR} -maxdepth 1 ! -name . ! -name .git*
        -exec ln -s {} ${PROJECT_BINARY_DIR}/kernel/. \\\;
)


#----------------------------------------------------------------
#  MPOOL_KMOD: function to build a kernel module
#
#  Example:
#
#      MPOOL_KMOD(
#          NAME   hse_kvdb
#          SRCS
#              # paths to source files must not start with "../"
#              foo/foo.c
#              foo/bar/bar.c
#              foo/blah/blahc
#          INCLUDES
#              ${MPOOL_IKVDB_INCLUDE_DIRS}
#              ${MPOOL_MPOOL1_INCLUDE_DIRS}
#              ${MPOOL_PLATFORM_INCLUDE_DIRS}
#              # HACK: if we copy *.h files as well as *.c files
#              # to kernel dir, we wouldn't need to specify
#              # the source dirs here.
#              ${CMAKE_CURRENT_SOURCE_DIR}/foo
#              ${CMAKE_CURRENT_SOURCE_DIR}/foo/bar
#              ${CMAKE_CURRENT_SOURCE_DIR}/foo/blah
#          COMPONENT component]
#      )
#
# COMPONENT is optional.  It defaults to "runtime".
#----------------------------------------------------------------

FUNCTION(MPOOL_KMOD)

    #------------------------------------------------
    # Parse and check args
    #------------------------------------------------
    SET(one_value_opts
        NAME            # (required) name for the kernel module
        TARGET          # (optional) synthetic name of makefile target
        COMPONENT       # (optional) installation component, default "runtime"
        )

    SET(multi_value_opts
        SRCS            # (required) source files creating the kernel module
        DEPS            # CMake targets this kernel module depends upon
        CFLAGS          # Additional CFLAGS for user-space compile
        INCLUDES        # Directories to search for #include
        KMOD_DEPS       # Module dependencies for kernel module
        )

    CMAKE_PARSE_ARGUMENTS(
        param
        "" "${one_value_opts}" "${multi_value_opts}"
        ${ARGN})

    IF("${param_NAME}" STREQUAL "")
        MESSAGE(FATAL_ERROR "MPOOL_KMOD: Must set NAME")
    ENDIF()

    IF("${param_SRCS}" STREQUAL "")
        MESSAGE(FATAL_ERROR "MPOOL_KMOD: Must set SRCS")
    ENDIF()

    IF(NOT "${param_UNPARSED_ARGUMENTS}" STREQUAL "")
        MESSAGE(
            FATAL_ERROR
            "MPOOL_KMOD: Unknown args: ${param_UNPARSED_ARGUMENTS}")
    ENDIF()

    IF("${param_TARGET}" STREQUAL "")
        SET(param_TARGET ${param_NAME}-kmod)
    ENDIF()

    # Optional COMPONENT defaults to "runtime"
    IF("${param_COMPONENT}" STREQUAL "")
        SET(param_COMPONENT "runtime")
    ENDIF()

    #------------------------------------------------
    # Define local vars
    #------------------------------------------------

    SET(kmod_build_dir ${CMAKE_CURRENT_BINARY_DIR}/kbuild.${param_NAME})

    SET(real_kmod_file ${kmod_build_dir}/${param_NAME}.ko)

    SET(staged_kmod_file ${PROJECT_BINARY_DIR}/kernel/mpool/${param_NAME}.ko)

    MY_PREPEND_OVER(include_dirs_cflags " -I" ${param_INCLUDES})

    #------------------------------------------------
    # Define KMOD_OBJS from param_SRCS
    # - KMOD_OBJS is used in expanstions with CONFIGURE_FILE
    #------------------------------------------------

    SET(tmplist)
    FOREACH(arg ${param_SRCS})
        STRING(REGEX REPLACE "\.c$" ".o" objfile ${arg})
        IF(NOT("${param_NAME}.o" STREQUAL "${objfile}"))
          LIST(APPEND tmplist "${objfile}")
        ENDIF()
    ENDFOREACH()
    MY_JOIN(KMOD_OBJS " " ${tmplist})
    UNSET(tmplist)

    #------------------------------------------------
    # Define KBUILD_EXTRA_SYMBOLS
    #------------------------------------------------

    # KBUILD_EXTRA_SYMBOLS is a space separated list of Module.symvers
    # files that this module depends on.  This logic relies on each
    # module FOO setting a global property FOO_symver_file.

    SET_PROPERTY(GLOBAL PROPERTY ${param_TARGET}_symver_file
        "${kmod_build_dir}/Module.symvers" )

    SET(tmplist)
    FOREACH(dep ${param_KMOD_DEPS})
        GET_PROPERTY(value GLOBAL PROPERTY ${dep}_symver_file)
        LIST(APPEND tmplist "${value}")
    ENDFOREACH()
    MY_JOIN(KBUILD_EXTRA_SYMBOLS " " ${tmplist})
    UNSET(tmplist)

    #------------------------------------------------
    # Create output dir
    #------------------------------------------------

    FILE(MAKE_DIRECTORY ${kmod_build_dir})

    #------------------------------------------------
    # Create symlinks in output dir to source files
    #------------------------------------------------
    FOREACH(source_file ${param_SRCS})
        SET(dest_file ${kmod_build_dir}/${source_file})
        GET_FILENAME_COMPONENT(dest_dir ${dest_file} DIRECTORY)
        GET_FILENAME_COMPONENT(source_file_abs ${source_file} ABSOLUTE)
        FILE(RELATIVE_PATH rel_path ${kmod_build_dir} ${source_file_abs})
        MY_EXECUTE_OR_DIE("${CMAKE_COMMAND}" -E make_directory  "${dest_dir}")
        MY_EXECUTE_OR_DIE("${CMAKE_COMMAND}" -E create_symlink  "${source_file_abs}" "${dest_file}")
    ENDFOREACH()

    #------------------------------------------------
    # Generate Kbuild and Makefile from *.in templates
    #------------------------------------------------

    # The templates expand the following vars:
    #   KMOD_NAME
    #   KMOD_OBJS
    #   KMOD_CCFLAGS
    #   KMOD_CDEFS
    #   KBUILD_EXTRA_SYMBOLS
    #   KDIR

    set(KMOD_CDEFS)
    get_directory_property(proplist DIRECTORY ${CMAKE_SOURCE_DIR} COMPILE_DEFINITIONS)
    foreach(arg ${proplist})
        set(KMOD_CDEFS "${KMOD_CDEFS} -D${arg}")
    endforeach()

    SET(KMOD_NAME ${param_NAME})

    MY_JOIN(KMOD_CCFLAGS " " ${include_dirs_cflags})
    set(KMOD_CCFLAGS "${KMOD_CCFLAGS} ${param_CFLAGS} ${CMAKE_KC_FLAGS}")

    IF( "${MPOOL_DISTRO}" STREQUAL "el6" )
    CONFIGURE_FILE(
        ${MPOOL_TREE_SCRIPTS_DIR}/kernel/Kbuild.el6.in
        ${kmod_build_dir}/Kbuild
        @ONLY)
    ELSE()
    CONFIGURE_FILE(
        ${MPOOL_TREE_SCRIPTS_DIR}/kernel/Kbuild.in
        ${kmod_build_dir}/Kbuild
        @ONLY)
    ENDIF()

    CONFIGURE_FILE(
        ${MPOOL_TREE_SCRIPTS_DIR}/kernel/Makefile.in
        ${kmod_build_dir}/Makefile
        @ONLY)

    unset(proplist)
    unset(KMOD_CDEFS)

    #------------------------------------------------
    # Target and command sequences to build kernel module
    #------------------------------------------------

    ADD_CUSTOM_TARGET(
        ${param_TARGET} ALL
        DEPENDS ${staged_kmod_file})

    # Command sequence for: src -> real_kmod_file
    ADD_CUSTOM_COMMAND(
        OUTPUT  ${real_kmod_file}
        COMMAND ${CMAKE_MAKE_PROGRAM} -C ${kmod_build_dir} V=\${VERBOSE}
        DEPENDS
            ${param_SRCS}
            ${param_KMOD_DEPS} ${MPOOL_SYNTH_PREREQS}
	    ${CMAKE_BINARY_DIR}/stage/include/mpool_version.h
        VERBATIM)

    # Command sequence for: real_kmod_file -> staged_kmod_file
    ADD_CUSTOM_COMMAND(
        OUTPUT ${staged_kmod_file}
        COMMAND ln -sf ${real_kmod_file} ${staged_kmod_file}
        DEPENDS ${real_kmod_file}
        VERBATIM)

    #------------------------------------------------
    # Generate an install rule for this kernel module
    #------------------------------------------------
    set (UNAME_CMD uname -r)
    EXECUTE_PROCESS(
        COMMAND ${UNAME_CMD}
        OUTPUT_VARIABLE  CMD_OUTPUT
        OUTPUT_STRIP_TRAILING_WHITESPACE)

    INSTALL(
        FILES ${real_kmod_file}
        DESTINATION lib/modules/${CMD_OUTPUT}/mpool
        COMPONENT ${param_COMPONENT})
ENDFUNCTION()

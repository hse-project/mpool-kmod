#
# SPDX-License-Identifier: GPL-2.0-only
#
# Copyright (C) 2015-2020 Micron Technology, Inc.  All rights reserved.
#

The mpctl subsystem contains the app-facing api for the services and
abstractions of the mpool component.  Handles and refcounting present some
challenges when the app is in user space - for two main reasons:

* It is considered bad form to hand out handles that are pointers to
  kernel data structures, for security reasons.
* Getting refcounted handles on behalf of user space is problematic because
  if the app crashes, those refs would be leaked.

The solution to both problems is refmaps and uhandles.

But before you read on, you should probably read
../mpcore/handles-and-refs.txt to understand the kernel-only refounting
problem and infrastructure (which is simpler, and foundational to refmaps
and uhandles).

...now that you've read that...

If user space needs a "uhandle" to a kernel object (an mblocks or an
mlog), mpctl uses a refmap as an intermediary.  The first time user space
"gets" the object, a refmap entry is created.  The refmap entry holds a
single ref on the mpcore object, but it also counts gets/puts from the
application (without perturbing its single ref on the mpcore object).

The refmap entry is also used to resolve a "uhandle" (which is *not* the
kernel address of an object layout) to the address of an object layout.
The layout address, plus other optional metadata, is stored in each
refmap entry.

When an object is 'put', resulting in a zero refcount on the refmap
entry, the entry is removed from the refmap - and its ref on the mpcore
object is put.  Note that the object still exists (because put is not
delete), but the refmap no longer has a reference on it.

In order to legally delete an object, the refcount on the refmap entry
must be 1, and the refcount on the mpcore object must be 1.  Otherwise,
somebody thinks they still have a refcounted [k|u]handle to the object -
or somebody has a get/put balance bug.

What if the app crashes?

We only allow a single open to an mpool dataset.

In an orderly shutdown, a Data Manager (e.g. kvdb) should delete all its
mcache maps (which have refs on mpcore objects, which will be put when the
maps are deleted) and put all its references to objects.  If it does so,
its refmap(s) will be empty because all refs were put.

When a dataset is closed (the "last" close, but we are single-open for all
practical purposes), the refmaps can be cleaned up because uhandles are
not valid after close.  If a refmap is not empty as of last close, that
warrants logging an error.  The DM either has a put/get balance bug, or it
crashed or cored.

On last close, we log a warning noting how many refs to how many objects
were leaked.

What about failed deletes?

Enforcing refcounting up and down the stack (refmaps for user space mpctl
clients, and object layout refcounts in mpcore) will lead to some failed
deletes.  If a DM attempts to delete an object whose refcount is not 1,
That is a bug in the app that must be addressed.  When that happens, we
return an error, and log an error.

How does the api work?

The mpctl API wraps the mpcore api (e.g. mp_mblock_alloc() wraps
mblock_alloc()).  But the mpctl adds the refmap functionlity, as follows:

The following operations return a hhandle based on an objid, and the latter
populates the objid into the refmap.

mp_mblock_alloc(objid)    - Always creates a refmap entry (provided mpcore
			    allocates successfully) and returns a uhandle.
mp_mblock_find_get(objid) - Looks up the objid in the refmap; if present,
			    returns the uhandle.  If not present, populates
			    it in the refmap (with a ref of 1 on the mpcore
			    object, and a ref of 1 on the refmap entry)
mp_mblock_get(objid)      - If a caller has a uhandle, and it (for example)
			    needs to share the uhandle with another thread,
			    the it can call mp_mblock_get(uhandle) to get
			    a reference-counted uhandle for the thread.
			    Each thread should call mp_mblock_put(uhandle)
			    when it is finished with the uhandle.  The app
			    is responsible for relinquishing all but one
			    ref on a uhandle before using in to delete an
			    object.

The following normal operations release a ref on a refmap_node, and may delete
the refmap node.  All of these functions take a uhandle as input, and use the
refmap to resolve the uhandle to a layout address for operations on mpcore.
These operations resolve the uhandle to objid via refmap_resolve(), which does
not get or put any new refs.

(uh = uhandle)

mp_mblock_abort(uh)   - Warning if the refmap_node refcount is not 1. Delete
		      	the refmap_node, and abort the mpcore object.
mp_mblock_put(uh)     - Decrements the refcount on the refmap_node.  Deletes
		      	the node if the refcount has gone to zero.
mp_mblock_delete(uh)  - INTERIM 6/2017: Attempts to delete the mpcore object.
		      	Deletes the refmap_node, regardless of its refcount
		      	(with a warning if the refcount was not 1 prior to
			delete)
		      - SOON: Checks that the refcount on the refmap_node is 1
		      	(fail if not).  Attempt to delete the mpcore object
		      	(will fail if its refcount is not 1).  If successful,
		      	remove the refmap_node.

The following operations require a valid uhandle to the object they act on:

mp_mblock_write(uh)   - Use refmap_resolve() to resolve uhandle to objid
mp_mblock_commit(uh)  - Use refmap_resolve() to resolve uhandle to objid
mp_mblock_read(uh)    - Use refmap_resolve() to resolve uhandle to objid
mp_mblock_realloc(uh) - If we support mblock_realloc(), that re-uses an objid,
		      	which means there is a uhandle for it already.
		      	Use refmap_resolve() to resolve uhandle to objid
mp_mblock_get_props*(uh)


What is a refmap?

A refmap is an in-memory key/value store where the values are layout
addresses and the keys are mblock or mlog objids used by user space
callers.

A refmap is implemented as a shrub, which is a hash table of red-black
trees.

What are uhandles?

A uhandle is an opaque value that can be used to look up an object in
a refmap or in mpcore.  It could just be the same as an objid, but that
would fail in one important respect: we would like to catch DMs that
inadvertantly conflate the two.

With that in mind, a uhandle differs by one bit from an objid.  This allows
us to detect it if an app interchanges the two, and it also allows us to
temporarily tolerate conflation.  As of 6/2017, most of our apps don't
recognize the difference.  By allowing mcache maps to be created with either,
we avoid breaking the whole world until we get the apps updated.

Whenever an app uses an objid in place of a uhandle (or vice versa), we
log an error.

What is the index key for refmaps

Refmaps are indexed by objid.  This makes more sense than keying by
uhandle, since the "find" variants must find the back-end object by objid.
For operations that just need to resolve a uhandle to khandle (layout
address), we first convert the uhandle to objid, then lookup in the
refmap by objid.
